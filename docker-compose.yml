
name: "exam-platform"


services:
  web:
    container_name: "Django"
    build: 
      context: .
      dockerfile: ./core/Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./core:/app
      - ./cassandra_orm:/app/cassandra_orm
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - cassandra-seed
    networks:
      - main

  db:
    container_name: "PostgreSQL"
    image: postgres:17
    volumes:
      - custom_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=custom_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - main

  redis:
    container_name : "Redis"
    image: redis:7.2
    volumes:
      - redis_data:/data
    networks:
      - main

  nginx:
    container_name : "Nginx"
    image: nginx:1.27
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    networks:
      - main
  
  fastapi_exam:
    container_name: "FastAPI"
    build: 
      context: .
      dockerfile: ./exam_fastapi/Dockerfile
    command: fastapi dev app.py --host=0.0.0.0 --port=1234
    networks:
      - main
    volumes:
      - ./exam_fastapi:/app
      - ./cassandra_orm:/app/cassandra_orm
    env_file:
      - .env
      
  fastapi_exam-2:
    container_name: "FastAPI-2"
    build: 
      context: .
      dockerfile: ./exam_fastapi/Dockerfile
    command: fastapi dev app.py --host=0.0.0.0 --port=1235
    networks:
      - main
    volumes:
      - ./exam_fastapi:/app
      - ./cassandra_orm:/app/cassandra_orm
    env_file:
      - .env
      
  fastapi_exam-3:
    container_name: "FastAPI-3"
    build: 
      context: .
      dockerfile: ./exam_fastapi/Dockerfile
    command: fastapi dev app.py --host=0.0.0.0 --port=1236
    networks:
      - main
    volumes:
      - ./exam_fastapi:/app
      - ./cassandra_orm:/app/cassandra_orm
    env_file:
      - .env
      
  cassandra-seed:
    image: cassandra:4.1
    container_name: cassandra-seed
    environment:
      - CASSANDRA_CLUSTER_NAME=ExamPlatformCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra-seed,cassandra-node1,cassandra-node2  # All nodes as seeds
      - CASSANDRA_NUM_TOKENS=256
      - CASSANDRA_AUTO_BOOTSTRAP=true
    volumes:
      - cassandra_data_seed:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra", "-e", "DESCRIBE KEYSPACES"]
      interval: 30s
      timeout: 60s  # Increased timeout
      retries: 10   # Increased retries
      start_period: 120s  # Give Cassandra time to start
    networks:
      - main

  cassandra-node1:
    image: cassandra:4.1
    container_name: cassandra-node1
    environment:
      - CASSANDRA_CLUSTER_NAME=ExamPlatformCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra-seed,cassandra-node1,cassandra-node2
      - CASSANDRA_NUM_TOKENS=256
      - CASSANDRA_AUTO_BOOTSTRAP=true
    volumes:
      - cassandra_data_node1:/var/lib/cassandra
    depends_on:
      cassandra-seed:
        condition: service_healthy  # Wait for seed to be healthy
    healthcheck:
      test: ["CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra", "-e", "DESCRIBE KEYSPACES"]
      interval: 30s
      timeout: 60s
      retries: 10
      start_period: 120s
    networks:
      - main

  cassandra-node2:
    image: cassandra:4.1
    container_name: cassandra-node2
    environment:
      - CASSANDRA_CLUSTER_NAME=ExamPlatformCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra-seed,cassandra-node1,cassandra-node2
      - CASSANDRA_NUM_TOKENS=256
      - CASSANDRA_AUTO_BOOTSTRAP=true
    volumes:
      - cassandra_data_node2:/var/lib/cassandra
    depends_on:
      cassandra-seed:
        condition: service_healthy  # Wait for seed to be healthy
    healthcheck:
      test: ["CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra", "-e", "DESCRIBE KEYSPACES"]
      interval: 30s
      timeout: 60s
      retries: 10
      start_period: 120s
    networks:
      - main

  celery:
    container_name: "Celery"
    build:
      context: .
      dockerfile: ./core/Dockerfile
    command: celery -A core worker --loglevel=info
    volumes:
      - ./core:/app
      - ./cassandra_orm:/app/cassandra_orm
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - main

volumes:
  custom_postgres_data:
  redis_data:
  cassandra_data_seed:
  cassandra_data_node1:
  cassandra_data_node2:

networks:
  main:
    driver: bridge